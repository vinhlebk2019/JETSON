# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aev_pkg/gui_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gui_msg(genpy.Message):
  _md5sum = "0288aa76c680cc5123702f434a849fe7"
  _type = "aev_pkg/gui_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 	msg_counter
bool 	userReqStart
bool 	userReqAutoRun
bool 	userReqStop
bool 	clearError
int16 	speedSetpoint
uint8 	turnSignal
bool 	horn
bool 	frontLight
uint8 steeringLeftRight"""
  __slots__ = ['msg_counter','userReqStart','userReqAutoRun','userReqStop','clearError','speedSetpoint','turnSignal','horn','frontLight','steeringLeftRight']
  _slot_types = ['uint32','bool','bool','bool','bool','int16','uint8','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       msg_counter,userReqStart,userReqAutoRun,userReqStop,clearError,speedSetpoint,turnSignal,horn,frontLight,steeringLeftRight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gui_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.msg_counter is None:
        self.msg_counter = 0
      if self.userReqStart is None:
        self.userReqStart = False
      if self.userReqAutoRun is None:
        self.userReqAutoRun = False
      if self.userReqStop is None:
        self.userReqStop = False
      if self.clearError is None:
        self.clearError = False
      if self.speedSetpoint is None:
        self.speedSetpoint = 0
      if self.turnSignal is None:
        self.turnSignal = 0
      if self.horn is None:
        self.horn = False
      if self.frontLight is None:
        self.frontLight = False
      if self.steeringLeftRight is None:
        self.steeringLeftRight = 0
    else:
      self.msg_counter = 0
      self.userReqStart = False
      self.userReqAutoRun = False
      self.userReqStop = False
      self.clearError = False
      self.speedSetpoint = 0
      self.turnSignal = 0
      self.horn = False
      self.frontLight = False
      self.steeringLeftRight = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I4Bh4B().pack(_x.msg_counter, _x.userReqStart, _x.userReqAutoRun, _x.userReqStop, _x.clearError, _x.speedSetpoint, _x.turnSignal, _x.horn, _x.frontLight, _x.steeringLeftRight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.msg_counter, _x.userReqStart, _x.userReqAutoRun, _x.userReqStop, _x.clearError, _x.speedSetpoint, _x.turnSignal, _x.horn, _x.frontLight, _x.steeringLeftRight,) = _get_struct_I4Bh4B().unpack(str[start:end])
      self.userReqStart = bool(self.userReqStart)
      self.userReqAutoRun = bool(self.userReqAutoRun)
      self.userReqStop = bool(self.userReqStop)
      self.clearError = bool(self.clearError)
      self.horn = bool(self.horn)
      self.frontLight = bool(self.frontLight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I4Bh4B().pack(_x.msg_counter, _x.userReqStart, _x.userReqAutoRun, _x.userReqStop, _x.clearError, _x.speedSetpoint, _x.turnSignal, _x.horn, _x.frontLight, _x.steeringLeftRight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.msg_counter, _x.userReqStart, _x.userReqAutoRun, _x.userReqStop, _x.clearError, _x.speedSetpoint, _x.turnSignal, _x.horn, _x.frontLight, _x.steeringLeftRight,) = _get_struct_I4Bh4B().unpack(str[start:end])
      self.userReqStart = bool(self.userReqStart)
      self.userReqAutoRun = bool(self.userReqAutoRun)
      self.userReqStop = bool(self.userReqStop)
      self.clearError = bool(self.clearError)
      self.horn = bool(self.horn)
      self.frontLight = bool(self.frontLight)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I4Bh4B = None
def _get_struct_I4Bh4B():
    global _struct_I4Bh4B
    if _struct_I4Bh4B is None:
        _struct_I4Bh4B = struct.Struct("<I4Bh4B")
    return _struct_I4Bh4B
