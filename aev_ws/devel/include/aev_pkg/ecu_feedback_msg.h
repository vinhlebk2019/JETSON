// Generated by gencpp from file aev_pkg/ecu_feedback_msg.msg
// DO NOT EDIT!


#ifndef AEV_PKG_MESSAGE_ECU_FEEDBACK_MSG_H
#define AEV_PKG_MESSAGE_ECU_FEEDBACK_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aev_pkg
{
template <class ContainerAllocator>
struct ecu_feedback_msg_
{
  typedef ecu_feedback_msg_<ContainerAllocator> Type;

  ecu_feedback_msg_()
    : msg_counter(0)
    , feedbackSpeed_b1(0)
    , feedbackSpeed_b2(0)
    , feedbackSpeed_b3(0)
    , feedbackSpeed_b4(0)
    , acceleratorLevel(0)
    , acceleratorSwitch(false)
    , brakeSwitch(false)
    , movingDirection(false)
    , turnSignal(0)
    , horn(false)
    , frontLight(false)  {
    }
  ecu_feedback_msg_(const ContainerAllocator& _alloc)
    : msg_counter(0)
    , feedbackSpeed_b1(0)
    , feedbackSpeed_b2(0)
    , feedbackSpeed_b3(0)
    , feedbackSpeed_b4(0)
    , acceleratorLevel(0)
    , acceleratorSwitch(false)
    , brakeSwitch(false)
    , movingDirection(false)
    , turnSignal(0)
    , horn(false)
    , frontLight(false)  {
  (void)_alloc;
    }



   typedef uint32_t _msg_counter_type;
  _msg_counter_type msg_counter;

   typedef uint8_t _feedbackSpeed_b1_type;
  _feedbackSpeed_b1_type feedbackSpeed_b1;

   typedef uint8_t _feedbackSpeed_b2_type;
  _feedbackSpeed_b2_type feedbackSpeed_b2;

   typedef uint8_t _feedbackSpeed_b3_type;
  _feedbackSpeed_b3_type feedbackSpeed_b3;

   typedef uint8_t _feedbackSpeed_b4_type;
  _feedbackSpeed_b4_type feedbackSpeed_b4;

   typedef uint8_t _acceleratorLevel_type;
  _acceleratorLevel_type acceleratorLevel;

   typedef uint8_t _acceleratorSwitch_type;
  _acceleratorSwitch_type acceleratorSwitch;

   typedef uint8_t _brakeSwitch_type;
  _brakeSwitch_type brakeSwitch;

   typedef uint8_t _movingDirection_type;
  _movingDirection_type movingDirection;

   typedef uint8_t _turnSignal_type;
  _turnSignal_type turnSignal;

   typedef uint8_t _horn_type;
  _horn_type horn;

   typedef uint8_t _frontLight_type;
  _frontLight_type frontLight;





  typedef boost::shared_ptr< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> const> ConstPtr;

}; // struct ecu_feedback_msg_

typedef ::aev_pkg::ecu_feedback_msg_<std::allocator<void> > ecu_feedback_msg;

typedef boost::shared_ptr< ::aev_pkg::ecu_feedback_msg > ecu_feedback_msgPtr;
typedef boost::shared_ptr< ::aev_pkg::ecu_feedback_msg const> ecu_feedback_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator1> & lhs, const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator2> & rhs)
{
  return lhs.msg_counter == rhs.msg_counter &&
    lhs.feedbackSpeed_b1 == rhs.feedbackSpeed_b1 &&
    lhs.feedbackSpeed_b2 == rhs.feedbackSpeed_b2 &&
    lhs.feedbackSpeed_b3 == rhs.feedbackSpeed_b3 &&
    lhs.feedbackSpeed_b4 == rhs.feedbackSpeed_b4 &&
    lhs.acceleratorLevel == rhs.acceleratorLevel &&
    lhs.acceleratorSwitch == rhs.acceleratorSwitch &&
    lhs.brakeSwitch == rhs.brakeSwitch &&
    lhs.movingDirection == rhs.movingDirection &&
    lhs.turnSignal == rhs.turnSignal &&
    lhs.horn == rhs.horn &&
    lhs.frontLight == rhs.frontLight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator1> & lhs, const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aev_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4501f6c5918ccf5a041a7524a20b1561";
  }

  static const char* value(const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4501f6c5918ccf5aULL;
  static const uint64_t static_value2 = 0x041a7524a20b1561ULL;
};

template<class ContainerAllocator>
struct DataType< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aev_pkg/ecu_feedback_msg";
  }

  static const char* value(const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 	msg_counter\n"
"uint8 feedbackSpeed_b1\n"
"uint8 feedbackSpeed_b2\n"
"uint8 feedbackSpeed_b3 \n"
"uint8 feedbackSpeed_b4 \n"
"uint8 	acceleratorLevel\n"
"bool acceleratorSwitch\n"
"bool brakeSwitch\n"
"bool movingDirection\n"
"uint8 	turnSignal\n"
"bool 	horn\n"
"bool 	frontLight\n"
;
  }

  static const char* value(const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msg_counter);
      stream.next(m.feedbackSpeed_b1);
      stream.next(m.feedbackSpeed_b2);
      stream.next(m.feedbackSpeed_b3);
      stream.next(m.feedbackSpeed_b4);
      stream.next(m.acceleratorLevel);
      stream.next(m.acceleratorSwitch);
      stream.next(m.brakeSwitch);
      stream.next(m.movingDirection);
      stream.next(m.turnSignal);
      stream.next(m.horn);
      stream.next(m.frontLight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ecu_feedback_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aev_pkg::ecu_feedback_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aev_pkg::ecu_feedback_msg_<ContainerAllocator>& v)
  {
    s << indent << "msg_counter: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.msg_counter);
    s << indent << "feedbackSpeed_b1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedbackSpeed_b1);
    s << indent << "feedbackSpeed_b2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedbackSpeed_b2);
    s << indent << "feedbackSpeed_b3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedbackSpeed_b3);
    s << indent << "feedbackSpeed_b4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.feedbackSpeed_b4);
    s << indent << "acceleratorLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acceleratorLevel);
    s << indent << "acceleratorSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acceleratorSwitch);
    s << indent << "brakeSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brakeSwitch);
    s << indent << "movingDirection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.movingDirection);
    s << indent << "turnSignal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turnSignal);
    s << indent << "horn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn);
    s << indent << "frontLight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frontLight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AEV_PKG_MESSAGE_ECU_FEEDBACK_MSG_H
